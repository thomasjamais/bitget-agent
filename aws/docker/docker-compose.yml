version: '3.8'

services:
  trading-bot:
    build:
      context: ../..
      dockerfile: aws/docker/Dockerfile
    container_name: bitget-trading-bot
    restart: unless-stopped
    environment:
      # Database Configuration
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - AWS_REGION=${AWS_REGION}
      
      # Bot Configuration
      - NODE_ENV=production
      - CONFIG_PATH=/app/config/production-bot.yaml
      
      # API Keys (set these in .env file)
      - BITGET_API_KEY=${BITGET_API_KEY}
      - BITGET_SECRET=${BITGET_SECRET}
      - BITGET_PASSPHRASE=${BITGET_PASSPHRASE}
      
      # AI Configuration (optional)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
      - ENHANCED_AI_MODE=${ENHANCED_AI_MODE:-false}
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-info}
      
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "3000:3000"  # Web dashboard
      - "8080:8080"  # WebSocket server
    networks:
      - trading-network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: trading-bot-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: trading-bot-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: trading-bot-nginx
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - trading-network
    depends_on:
      - trading-bot

volumes:
  postgres_data:
  redis_data:

networks:
  trading-network:
    driver: bridge
