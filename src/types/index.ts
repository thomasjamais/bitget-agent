/**
 * Core type definitions for the Bitget trading bot
 */

export type Direction = "long" | "short";
export type OrderType = "market" | "limit" | "stop" | "stop_limit";
export type Timeframe = "1m" | "3m" | "5m" | "15m" | "30m" | "1h" | "2h" | "4h" | "6h" | "12h" | "1d";

/**
 * Trading signal generated by AI engine
 */
export interface Signal {
  at: number;
  symbol: string;
  timeframe: Timeframe;
  direction: Direction;
  confidence: number;
  name: string;
  metadata?: Record<string, any>;
}

/**
 * OHLCV bar data
 */
export interface Bar {
  open: number;
  high: number;
  low: number;
  close: number;
  volume: number;
  timestamp: number;
}

/**
 * Position intent before execution
 */
export interface PositionIntent {
  symbol: string;
  direction: Direction;
  quantity: number;
  leverage: number;
  reduceOnly?: boolean | undefined;
  orderType?: OrderType | undefined;
  price?: number | undefined;
  stopLoss?: number | undefined;
  takeProfit?: number | undefined;
}

/**
 * Investment instruction for a specific symbol or strategy
 */
export interface InvestmentInstruction {
  /** Unique identifier for this instruction */
  id: string;
  /** Human-readable name for this instruction */
  name: string;
  /** Description of the investment strategy */
  description?: string;
  /** Whether this instruction is active */
  enabled: boolean;
  
  /** Trading symbols this instruction applies to */
  symbols: string[];
  
  /** Timeframes to analyze */
  timeframes: Timeframe[];
  
  /** Direction preferences */
  direction: "long" | "short" | "both";
  
  /** Risk management parameters */
  risk: {
    /** Maximum risk percentage per trade */
    maxRiskPerTrade: number;
    /** Maximum leverage to use */
    maxLeverage: number;
    /** Maximum positions per symbol */
    maxPositionsPerSymbol: number;
    /** Maximum total positions */
    maxTotalPositions: number;
    /** Stop loss percentage */
    stopLossPercent?: number;
    /** Take profit percentage */
    takeProfitPercent?: number;
  };
  
  /** Signal requirements */
  signals: {
    /** Minimum confidence level to act on signals */
    minConfidence: number;
    /** Required signal sources (AI engines) */
    requiredSources?: string[];
    /** Cooldown period between trades (ms) */
    cooldownMs: number;
  };
  
  /** Schedule when this instruction is active */
  schedule?: {
    /** Days of week (0=Sunday, 6=Saturday) */
    daysOfWeek?: number[];
    /** Start time (HH:MM format) */
    startTime?: string;
    /** End time (HH:MM format) */
    endTime?: string;
    /** Timezone */
    timezone?: string;
  };
  
  /** Custom parameters for specific strategies */
  parameters?: Record<string, any>;
}

/**
 * Main bot configuration
 */
export interface BotConfig {
  /** Trading configuration */
  trading?: {
    enabled: boolean;
    mode: "live" | "paper" | "dry-run";
    confirmTrades?: boolean;
  };

  /** API configuration */
  api: {
    key: string;
    secret: string;
    passphrase: string;
    useTestnet: boolean;
    baseUrl?: string;
  };
  
  /** Investment instructions */
  instructions: InvestmentInstruction[];
  
  /** Global risk settings */
  globalRisk: {
    /** Maximum equity to risk across all positions */
    maxEquityRisk: number;
    /** Emergency stop - max daily loss percentage */
    maxDailyLoss: number;
    /** Circuit breaker - pause trading after consecutive losses */
    maxConsecutiveLosses: number;
    /** Position sizing method */
    sizingMethod: "fixed" | "percent" | "kelly" | "volatility";
  };
  
  /** Market data settings */
  marketData: {
    /** Primary symbols to monitor */
    symbols: string[];
    /** Default timeframe for analysis */
    defaultTimeframe: Timeframe;
    /** WebSocket reconnection settings */
    reconnect: {
      maxAttempts: number;
      delayMs: number;
    };
  };
  
  /** AI engine settings */
  ai: {
    /** Available AI engines */
    engines: {
      name: string;
      enabled: boolean;
      modelPath?: string;
      parameters?: Record<string, any>;
    }[];
    /** Minimum number of engines that must agree */
    consensusThreshold: number;
  };
  
  /** Logging and monitoring */
  logging: {
    level: "trace" | "debug" | "info" | "warn" | "error";
    file?: string;
    maxFiles?: number;
    maxSize?: string;
  };
  
  /** Notification settings */
  notifications?: {
    enabled: boolean;
    webhooks?: string[];
    email?: {
      enabled: boolean;
      smtp: {
        host: string;
        port: number;
        user: string;
        password: string;
      };
      to: string[];
    };
  };
}

/**
 * Runtime state and metrics
 */
export interface BotState {
  startTime: number;
  equity: Record<string, number>;
  positions: PositionIntent[];
  dailyPnL: number;
  consecutiveLosses: number;
  lastTradeTime: Record<string, number>;
  isActive: boolean;
  pauseReason?: string;
}